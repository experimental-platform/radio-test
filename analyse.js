var fs = require('fs'),
  crc = require('crc-32'),
  _ = require('underscore');

var testVector = ["364", "952", "364", "948", "348", "968", "1008", "296", "364", "948", "1024", "312", "368", "944", "1024", "296", "348", "968", "1004", "312", "352", "968", "1008", "308", "364", "948", "1032", "292", "352", "968", "1008", "308", "364", "948", "352", "952", "364", "968", "1008", "308", "368", "944", "352", "972", "344", "968", "1008", "308", "352", "10144", "356", "948", "364", "952", "364", "948", "1024", "296", "372", "952", "1024", "288", "372", "948", "1024", "312", "344", "952", "1024", "308", "352", "952", "1040", "292", "364", "948", "1024", "296", "364", "952", "1024", "308", "368", "944", "352", "972", "344", "968", "1028", "288", "368", "952", "364", "952", "360", "952", "1024", "308", "352", "10144", "364", "952", "364", "948", "372", "948", "1028", "308", "344", "952", "1024", "308", "352", "968", "1024", "292", "364", "948", "1028", "296", "360", "972", "1024", "288", "372", "944", "1024", "296", "364", "948", "1044", "288", "372", "948", "364", "952", "380", "948", "1024", "292", "352", "968", "364", "948", "364", "952", "1024", "296", "364", "10164", "344", "968", "352", "964", "352", "968", "1008", "308", "364", "952", "1024", "296", "372", "948", "1024", "312", "352", "960", "1016", "296", "364", "968", "1024", "292", "368", "952", "1024", "308", "364", "948", "1024", "300", "360", "952", "364", "968", "348", "968", "1024", "296", "364", "952", "360", "972", "352", "948", "1024", "312", "360", "10164", "348", "948", "372", "948", "364", "968", "1024", "292", "368", "952", "1024", "308", "348", "968", "1024", "292", "368", "952", "1024", "308", "364", "948", "1024", "300", "360", "952", "1040", "292", "368", "948", "1024", "312", "364", "952", "364", "948", "372", "948", "1024", "312", "360", "952", "368", "948", "368", "952", "1028", "292", "364", "10180", "352", "952", "364", "948", "364", "972", "1024", "288", "372", "948", "1024", "312", "344", "968", "1032", "296", "364", "968", "1008", "308", "352", "968", "1028", "288", "364", "952", "1040", "292", "368", "952", "1024", "308", "364", "948", "352", "972", "360", "952", "1024", "308", "372", "944", "368", "972", "344", "968", "1024", "292", "368", "10164", "364", "948", "364", "972", "352", "960", "1024", "300", "360", "952", "1024", "308", "352", "972", "1024", "308", "344", "972", "1004", "308", "372", "948", "1024", "312", "364", "948", "1024", "316", "344", "972", "1024", "308", "352", "968", "352", "972", "344", "972", "1024", "288", "372", "948", "364", "968", "348", "968", "1024", "296", "364", "10184", "344", "968", "380", "944", "352", "968", "1024", "288", "364", "972", "1024", "296", "364", "948", "1024", "308", "372", "944", "1024", "316", "352", "968", "1024", "292", "368", "952", "1024", "308", "364", "952", "1024", "312", "348", "968", "364", "968", "348", "968", "1024", "296", "364", "952", "364", "968", "352", "968", "1024", "292", "364", "10180"];

var timingToBit = function (timing) {
  if (200 < timing && timing < 400) {
    return true
  } else if (800 < timing && timing < 1200) {
    return false
  } else if (9000 < timing && timing < 11000) {
    return 'break';
  }
  console.log("UNKNOWN TIMING ERROR: " + timing.toString());
  return 'error';
};

var majority = function (ray) {
  _.countBy(ray, function (value) {
    return value
  })
};


var breakup = function (mem, entry) {
  if (entry === 'break') {
    mem.push([]);
  } else {
    mem[mem.length - 1].push(entry);
  }
  return mem;
};


var analyseBits = function (data) {
  // parse timings into bits and break them into sequences
  var values = _.map(data, parseFloat)
    .map(timingToBit)
    .reduce(breakup, [[]]);
  // filter out incomplete sequences
  var max_length = _.max(values, function (value) {
    return value.length
  }).length;
  values = _.filter(values, function (value) {
    return value.length === max_length;
  });
  return values[0];
  // TODO: merge all arrays together
  // values = _.zip.apply(values);
  // TODO: reduce to the majority
  //.map(_.max...);
  // return values;
};

// TODO: Analyse signal quality
//console.log(analyseBits(testVector));


exports.analyse = function (data) {
  data.bits = analyseBits(data.timings);
  data.crc = crc.str(data.bits.join());
  data.identity = data.crc;
  data.received = new Date();
  data.name = "ID: " + data.crc.toString() + ', ' + data.bits.length + " Bits";
  return data;
};